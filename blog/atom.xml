<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kubegems.io/blog</id>
    <title>KubeGems Blog</title>
    <updated>2022-03-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kubegems.io/blog"/>
    <subtitle>KubeGems Blog</subtitle>
    <icon>https://kubegems.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[登陆和认证设计]]></title>
        <id>kubegems-auth</id>
        <link href="https://kubegems.io/blog/kubegems-auth"/>
        <updated>2022-03-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[主要数据模型]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="主要数据模型">主要数据模型<a class="hash-link" href="#主要数据模型" title="Direct link to heading">​</a></h2><p><img loading="lazy" alt="pic" src="/assets/images/data-models.drawio-0acc3b60be686e11bcff59ec584bcbb8.svg" width="1131" height="571" class="img_E7b_"></p><p>数据模型的主要层级关系为 租户 -&gt; 项目 -&gt; 环境 -&gt; 应用;</p><p>对应到集群中的以下资源</p><table><thead><tr><th>资源</th><th>简写</th><th>group/version</th><th>是否是namespaced资源</th><th>Crd</th></tr></thead><tbody><tr><td>environments</td><td>tenv</td><td>gems.kubegems.io/v1beta1</td><td>false</td><td>Environment</td></tr><tr><td>tenantgateways</td><td>tgw</td><td>gems.kubegems.io/v1beta1</td><td>false</td><td>TenantGateway</td></tr><tr><td>tenantnetworkpolicies</td><td>tnetpol</td><td>gems.kubegems.io/v1beta1</td><td>false</td><td>TenantNetworkPolicy</td></tr><tr><td>tenantresourcequotas</td><td>tquota</td><td>gems.kubegems.io/v1beta1</td><td>false</td><td>TenantResourceQuota</td></tr><tr><td>tenants</td><td>ten</td><td>gems.kubegems.io/v1beta1</td><td>false</td><td>Tenant</td></tr></tbody></table><ul><li>系统内顶级资源为租户和集群,  租户和集群都由系统管理员添加；租户与集群通过<code>TenantResourceQuota</code>关联，一个租户在一个集群下只能存在一个TenantResourceQuota;
租户映射到集群中的CRD为<code>Tenant</code>, 租户CRD下存在<code>网络隔离策略(TenantNetworkPolicy)</code>和<code>资源限制(TenantResourceQuota)</code>以及<code>租户网关(TenantGateway)</code>, 这些子资源都将在租户crd创建的时候默认创建；</li><li>用户(Users)与租户，项目，环境都存在着关联关系，这些关联关系将为以后的用户权限提供数据支持；</li><li>项目仅仅是平台侧的概念，它表示一组应用的集合</li><li>环境与集群的namespace关联，实现环境隔离，资源限制，网络隔离等，环境则更多的是运维相关属性;</li><li>应用表示真实的应用</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="用户权限">用户权限<a class="hash-link" href="#用户权限" title="Direct link to heading">​</a></h2><p>系统的用户权限主要通过<strong>角色</strong>实现, 角色又分为<em>系统级角色</em>,<em>租户级角色</em>,<em>项目级角色</em>和<em>环境级角色</em>;</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="系统级角色">系统级角色<a class="hash-link" href="#系统级角色" title="Direct link to heading">​</a></h3><ul><li><strong>系统管理员</strong>的职责是管理系统资源，集群，集群插件，租户等; 系统管理员拥有一切资源的操作权限和读权限
</li><li><strong>普通用户</strong>代表 KubeGems 中的普通成员，用普通用户角色的账号仅能登陆系统，其他租户，项目等权限将根据租户和项目下的角色判断</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="租户级角色">租户级角色<a class="hash-link" href="#租户级角色" title="Direct link to heading">​</a></h3><ul><li><p><strong>租户管理员</strong>的主要职责是负责租户的成员管理和项目管理,负责项目添加和删除，租户成员的添加和修改; 租户管理员拥有租户下的一切资源操作权限和读权限</p></li><li><p><strong>租户成员</strong>默认仅可以读租户下的项目信息; 在添加<code>项目成员</code>，<code>环境成员</code>的时候，用户必须是租户成员才能作为项目成员和环境成员的备选项;</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="项目级角色">项目级角色<a class="hash-link" href="#项目级角色" title="Direct link to heading">​</a></h3><ul><li><p><strong>项目管理员</strong>的职责是负责项目的成员管理，项目的环境管理和项目下的应用管理; 项目管理员拥有项目下的一切资源的操作权限和读权限;</p></li><li><p>项目成员拥有三个角色，分别是<code>开发</code> <code>测试</code> <code>运维</code></p><ul><li><strong>项目开发成员</strong>可以读所有环境，只能操作开发类型的环境</li><li><strong>项目测试成员</strong>可以读所有环境，只能操作测试类型的环境</li><li><strong>项目运维成员</strong>可以读所有环境，可以操作开发 测试 生产类型的环境</li></ul></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="环境级角色">环境级角色<a class="hash-link" href="#环境级角色" title="Direct link to heading">​</a></h3><ul><li><p><strong>环境reader</strong>在默认情况下，项目成员是所有环境的reader,即只要是项目成员，就能读取所有的环境数据</p></li><li><p><strong>环境operator</strong>通常不需要配置这个角色，但是有特殊的情况，例如开发需要操作生产环境的资源，默认情况下开发人员只能操作开发环境，这时候授权开发人员在生产环境是operator的角色，就可以操作生产环境了;</p></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="登陆模块">登陆模块<a class="hash-link" href="#登陆模块" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="需求">需求<a class="hash-link" href="#需求" title="Direct link to heading">​</a></h3><p>支持多源登陆(ldap, oauth2)</p><ul><li><p>本地认证，支持账号+密码登陆</p></li><li><p>外部认证，支持ldap和oauth2的认证</p></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="登陆设计">登陆设计<a class="hash-link" href="#登陆设计" title="Direct link to heading">​</a></h3><p>插件式设计，允许不同类型的登陆源实现登陆插件即可,插件目前分为两类,分别是<code>OAUTH</code>和<code>LDAP</code></p><p>插件需要实现接口<code>aaa.AuthenticateIface</code>接口</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">type AuthenticateIface interface {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 返回登陆插件的名字</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    GetName() string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 返回登陆地址</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    LoginAddr() string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // , 获取用户信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 验证凭据,获取根据用户提供的凭据获取用户信息</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    GetUserInfo(ctx context.Context, cred *Credential) (*UserInfo, error)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>登陆流程:</p><ol><li><p>LDAP类型和默认账号密码登陆,直接提供登陆的用户和密码以及登陆源即可,登陆后将获得token</p></li><li><p>OAUTH类型，先获取登陆地址，重定向到登陆地址，通常这个登陆地址为第三方平台的认证授权界面，授权后第三方将会重定向到平台配置的一个地址，并且携带着第三方平台的一个授权code,平台通过这个code获取access_token，再带着这个access_token访问用户信息，通过第三方平台中的<code>用户名</code>作为kubegems中的用户，登陆成功后获得token</p></li></ol><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="认证设计">认证设计<a class="hash-link" href="#认证设计" title="Direct link to heading">​</a></h3><p>插件式设计，目前仅实现了基于JWT的认证方式; 需要实现接口<code>aaa.UserGetterIface</code></p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">type UserGetterIface interface {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    GetUser(req *http.Request) (u user.CommonUserIface, exist bool)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="认证流程">认证流程<a class="hash-link" href="#认证流程" title="Direct link to heading">​</a></h3><p>不同的认证插件, 从请求头中获取需要的信息，例如通过Authorization头获取Bearer token,通过获取到的信息载入用户，如果没有找到用户，则表示未登陆</p>]]></content>
        <author>
            <name>yud</name>
            <uri>https://github.com/pepesi</uri>
        </author>
        <category label="登陆认证" term="登陆认证"/>
        <category label="Auth" term="Auth"/>
    </entry>
</feed>